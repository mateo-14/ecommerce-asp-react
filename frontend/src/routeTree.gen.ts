/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as AuthImport } from './routes/_auth'
import { Route as DashboardIndexImport } from './routes/_dashboard/index'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as DashboardProductsRouteImport } from './routes/_dashboard/products/route'
import { Route as DashboardCategoriesRouteImport } from './routes/_dashboard/categories/route'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const DashboardProductsRouteRoute = DashboardProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCategoriesRouteRoute = DashboardCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/categories': {
      id: '/_dashboard/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof DashboardCategoriesRouteImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/products': {
      id: '/_dashboard/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof DashboardProductsRouteImport
      parentRoute: typeof DashboardImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DashboardRouteChildren {
  DashboardCategoriesRouteRoute: typeof DashboardCategoriesRouteRoute
  DashboardProductsRouteRoute: typeof DashboardProductsRouteRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardCategoriesRouteRoute: DashboardCategoriesRouteRoute,
  DashboardProductsRouteRoute: DashboardProductsRouteRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof DashboardRouteWithChildren
  '/categories': typeof DashboardCategoriesRouteRoute
  '/products': typeof DashboardProductsRouteRoute
  '/login': typeof AuthLoginRoute
  '/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/categories': typeof DashboardCategoriesRouteRoute
  '/products': typeof DashboardProductsRouteRoute
  '/login': typeof AuthLoginRoute
  '/': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/categories': typeof DashboardCategoriesRouteRoute
  '/_dashboard/products': typeof DashboardProductsRouteRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/categories' | '/products' | '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/categories' | '/products' | '/login' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_dashboard'
    | '/_dashboard/categories'
    | '/_dashboard/products'
    | '/_auth/login'
    | '/_dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_dashboard"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/categories",
        "/_dashboard/products",
        "/_dashboard/"
      ]
    },
    "/_dashboard/categories": {
      "filePath": "_dashboard/categories/route.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/products": {
      "filePath": "_dashboard/products/route.tsx",
      "parent": "/_dashboard"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_dashboard/": {
      "filePath": "_dashboard/index.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
